@page "/"
@using BlazorCountryApp.Interface
@using System.Text.Json
@using CountryData.Standard

@inject ICountryDataApi CountryDataApi

<PageTitle>Home</PageTitle>

<div>
    <input type="text" @bind="searchQuery" placeholder="Search by name" />
    <button @onclick="Search">Search</button>
</div>

<table class="table">
    <thead>
        <tr>
            <th scope="col">Name</th>
            <th scope="col">Flag</th>
            <th scope="col">Phone Code</th>
            <th scope="col">Country Code</th>
        </tr>
    </thead>
    <tbody>
        @if (countries != null)

        {

            foreach (var country in countries)

            {
                <tr>
                    <td>@country.CountryName</td>
                    <td>@country.CountryFlag</td>
                    <td>@country.PhoneCode</td>
                    <td>@country.CountryShortCode</td>
                </tr>
            }

        }
    </tbody>
</table>

<div>
    <button type="button" class="btn btn-primary" @onclick="PreviousPage" disabled="@(!CanGoPrevious)">Previous</button>
    <button type="button" class="btn btn-secondary" @onclick="NextPage" disabled="@(!CanGoNext)">Next</button>
</div>


@code{
    private IEnumerable<CountryData.Standard.Country>? countries;

    private int offset = 1;

    private int limit = 10;

    private string? searchQuery;


    private bool CanGoPrevious => offset > 1;

    private bool CanGoNext => countries != null && countries.Count() == limit;

    protected override async Task OnParametersSetAsync()
    {
        await LoadCountries();
    }

    private async Task LoadCountries()
    {
        var jsonString = await CountryDataApi.GetCountryDataAsync(offset, limit, searchQuery);
        countries = JsonSerializer.Deserialize<IEnumerable<Country>>(jsonString);
    }


    private async Task Search()

    {

        offset = 1;

        await LoadCountries();

    }

    private async Task PreviousPage()

    {

        if (CanGoPrevious)

        {

            offset--;

            await LoadCountries();

        }

    }

    private async Task NextPage()

    {

        if (CanGoNext)

        {

            offset++;

            await LoadCountries();

        }

    }
}

